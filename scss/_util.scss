/* stylelint-disable scss/at-if-no-null */
@use "./rwd" as rwd;
@use "sass:meta";
@use "sass:map";
@use "sass:list";
@use "sass:string";

@function -is-important($value, $important){
    @if $important {
        @return $value + " " + "!important";
    } @else {
        @return $value;
    }
}

@mixin -handle-css-list($selector, $css, $values, $important){
    $length: list.length($css);

    @each $name, $value-list in $values{
        @if meta.type-of($value-list) != list{
            @error "The value of each item in the values should be list.";
        }
        
        @if $length != list.length($value-list){
            @error "The length of css properties must be aligned with the length of the value of each item in the values.";
        }

        @if string.length($name) == 0{
            .#{$selector}{
                @for $i from 1 through $length{
                    #{list.nth($css, $i)}: -is-important(list.nth($value-list, $i), $important);
                }
            }
        } @else{
            .#{$selector}-#{$name}{
                @for $i from 1 through $length{
                    #{list.nth($css, $i)}: -is-important(list.nth($value-list, $i), $important);
                }
            }
        }
    }
}

@function -list-contains($list, $object){
    @return list.index($list, $object) != null;
}

@mixin -handle-css-string($selector, $css, $values, $important){
    $types: string number color calculation;

    @each $name, $value in $values{
        @if not list-contains($types, meta.type-of($value)){
            @error "The type of #{$name} is not accepted";
        }

        @if string.length($name) == 0{
            .#{$selector}{
                #{$css}: -is-important(#{$value}, $important);
            }
        } @else{
            .#{$selector}-#{$name}{
                #{$css}: -is-important(#{$value}, $important);
            }
        }
    }
}

@mixin -apply-selector-mixin($selector, $css, $values, $important){
    @if meta.type-of($css) == string{
        @include -handle-css-string($selector, $css, $values, $important);
    } @else if meta.type-of($css) == list{
        @include -handle-css-list($selector, $css, $values, $important);
    } @else{
        @error "css should be string or list of string.";
    }
}

@mixin -iterate-break-points($name, $css, $values, $important){
    @each $key, $point in rwd.$break-points{
        @if $key == "xs"{
            @media (width < #{$point}) {
                @include -apply-selector-mixin(#{$name}-#{$key}, $css, $values, $important);
            }
        } @else{
            @media (width >= #{$point}) {
                @include -apply-selector-mixin(#{$name}-#{$key}, $css, $values, $important);
            }
        }
    }
}

/*
* get value by ethier main value or other values
* @param $main: any
* @param $others: list<any>
* @return any
**/
@function get-or-others($main, $others...){
    @if $main != null{
        @return $main;
    } @else{
        @each $other in $others{
            @if $other != null {
                @return $other;
            }
        }

        @error "One of others should be not null.";
    }
}

@mixin -make-variables($var, $values){
    @if meta.type-of($var) != string {
        @error "var should be string.";
    }

    :root{
        @each $name, $value in $values{
            @if string.length($name) == 0{
                @error "var name should not be empty.";
            }

            #{$var}-#{$name}: #{$value};
        }
    }
}

@function -convert-to-variables($var, $values){
    $new-values: ();

    @each $key in map.keys($values){
        $new-values: map.set($new-values, $key, var(#{$var}-#{$key}));
    }

    @return $new-values;
}

@mixin -make-utility-mixin($utility){
    $name: map.get($utility, "name");
    $important: get-or-others(map.get($utility, "important"), true);
    $responsive: get-or-others(map.get($utility, "responsive"), true);
    $values: map.get($utility, "values");
    $css: map.get($utility, "css");
    $var: map.get($utility, "var");

    @if $var != null{
        @include -make-variables($var, $values);

        $values: -convert-to-variables($var, $values);
    }

    @include -apply-selector-mixin($name, $css, $values, $important);
    
    @if $responsive{
        @include -iterate-break-points($name, $css, $values, $important);
    }
}

/* format: name[-rwd][-value]; */

/* 
* type Utility{
*  important: boolean = true
*  responsive: boolean = true
*  name: string
*  css: string | list<string> // seperate with space
*  values: map<string, string | list<string>> // seperate with space
* }
*/

/*
* map and apply class names of utility
* @param utility-map: map<Utility>
*/
@mixin map-utilities($utility-map){
    @each $key in map.keys($utility-map){
        @debug $key;
        @include -make-utility-mixin(map.get($utility-map, $key));
    }
}

/*
* use it when utility has only default.
* @param $value: string | list<string>
* @return map
**/
@function only-default($value){
    @return ('': $value);
}

/**
* support ternary statements
* @param $bool: boolean
* @param $value1: any
* @param $value2: any
* @return any
*/
@function if-else($bool, $value1, $value2){
    @if $bool{
        @return $value1;
    } @else{
        @return $value2;
    }
}